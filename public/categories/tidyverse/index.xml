<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tidyverse on Dusty Turner</title>
    <link>/categories/tidyverse/</link>
    <description>Recent content in tidyverse on Dusty Turner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you likes to quote or reproduce.</copyright>
    <lastBuildDate>Thu, 29 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/tidyverse/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ESPN Fantasy Football V3 API: An R Solution</title>
      <link>/post/espn-fantasy-football-v3-api-an-r-solution/</link>
      <pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/espn-fantasy-football-v3-api-an-r-solution/</guid>
      <description>ESPN’s New API (V3)In previous seasons, we’ve enjoyed relatively easy access to ESPN’s fantasy sports data. Sometime in the last few months, ESPN altered/upgraded their AP to V3.
As I’ve tried to replicate previous analysis, old methods accessing the V2 API no longer work.
Credit Where Credit Is DueQuick crash course on ESPN’s new #fantasyfootball API, #python focused — https://t.</description>
    </item>
    
    <item>
      <title>Goal: Read 1000 (Children&#39;s) Books in 2018</title>
      <link>/post/analysis-of-my-children-s-reading-list/</link>
      <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/analysis-of-my-children-s-reading-list/</guid>
      <description>IntroductionOver Christmas 2017, my wife, Jill, resolved that our family (to include babysitters) would read our children over 1000 new books in 2018. More specifically, 29 December 2017 - 28 December 2018.
A goal like this takes dedication, love, and of course, a Data Science-y approach.
Special thanks to Ally, Zia, and Bookbuddy for help in accomplishing this goal!
Also, special thanks to drob and juliasilge who privde the tidytext package and the entire R open-source community I rely on to do this analysis.</description>
    </item>
    
    <item>
      <title>Working with Dates in R</title>
      <link>/post/dates-in-r/</link>
      <pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/dates-in-r/</guid>
      <description>A Little About Dates in RBefore we launch into any analysis that contains dates, we should know a few important nuggets about how R handles date-like objects.
There are 3 date/time classes are built in to R
- Date
- POSIXct
- POSIXlt
Base RFirst, base R can read a string of text and convert it to a date class. To help it read the date, you must tell R what date format your character string should expect.</description>
    </item>
    
    <item>
      <title>Helping A Colleague Explore Data</title>
      <link>/post/helping-a-colleague-explore-data/</link>
      <pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/helping-a-colleague-explore-data/</guid>
      <description>IntroductionA colleague of mine asked me to help him explore a dataset in R. He has little experience in R, so I will provide as much detail as I can in this exploration. My goal here is to make this post both ‘learn-able’ and ‘replicable’.
Install and/or load necessary packagesif (!require(&amp;quot;tidyverse&amp;quot;)) install.packages(&amp;quot;tidyverse&amp;quot;)if (!require(&amp;quot;readr&amp;quot;)) install.packages(&amp;quot;readr&amp;quot;)if (!require(&amp;quot;lubridate&amp;quot;)) install.packages(&amp;quot;lubridate&amp;quot;)if (!require(&amp;quot;stringi&amp;quot;)) install.packages(&amp;quot;stringi&amp;quot;)Set Working Directory If Necessary# setwd(&amp;quot;//filepath/of/your/csvfile&amp;quot;)Read in dataWe use read_csv from the readr package because it does a better job than the base read.</description>
    </item>
    
  </channel>
</rss>