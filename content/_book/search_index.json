[
["index.html", "Intermediate R 1 Class Introduction 1.1 Expectations 1.2 Class Introductions 1.3 Instructor Introduction 1.4 Course Intent 1.5 Get Course Documents 1.6 Tidy Ecosystem", " Intermediate R MAJ Dusty Turner 15 JUN 2020 1 Class Introduction Agenda Data Manipulation Data Visulaization Data Modeling Incorporateing Intermediate R Techniques 1.1 Expectations In taking this course, I’m assuming you have a working knowledge of the following… Base R and possibly ‘tidy’ concepts Computer Coding Statistics Dad Jokes 1.2 Class Introductions Around the room: Where you are from: Who you work for: How you are involved in Data Science: (ie - statistics, coding, application buidling, manager, etc) Why you sad in that seat: Favorite sports team: 1.3 Instructor Introduction Army Combat Engineer Platoon Leader / XO / Company Commander Geospatial / Sapper / Route Clearance Hawaii / White Sands Missile Range / Iraq / Afghanistan Education West Point ’07 Operations Research, BS Missouri University of Science and Technology ’12 Engineering Management, MS THE Ohio State ’16 Integrated Systems Engineering, MS Applied Statistics, Graduate Minor Data Science R User Since ’14 Catch me on Twitter @dtdusty http://dusty-turner.netlify.com/ 1.4 Course Intent Be interactive Ask questions at any point Don’t let me move too fast (or too slow) Run the code with me 1.5 Get Course Documents [github repo]https://github.com/dusty-turner/MORS-Intermediate-R SSH: \\(git@github.com:dusty-turner/MORS-Intermediate-R.git\\) HTTPS: https://github.com/dusty-turner/MORS-Intermediate-R.git 1.6 Tidy Ecosystem "],
["2-data-manipulation.html", "2 Data Manipulation 2.1 Read in Data 2.2 Analysis with dplyr 2.3 Joins 2.4 Other dplyr Tricks", " 2 Data Manipulation library(tidyverse) library(tidymodels) library(janitor) 2.1 Read in Data read_csv(&quot;data_files/Batting.csv&quot;) ## # A tibble: 102,816 x 22 ## playerID yearID stint teamID lgID G AB R H `2B` `3B` HR RBI ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 abercda~ 1871 1 TRO &lt;NA&gt; 1 4 0 0 0 0 0 0 ## 2 addybo01 1871 1 RC1 &lt;NA&gt; 25 118 30 32 6 0 0 13 ## 3 allisar~ 1871 1 CL1 &lt;NA&gt; 29 137 28 40 4 5 0 19 ## 4 allisdo~ 1871 1 WS3 &lt;NA&gt; 27 133 28 44 10 2 2 27 ## 5 ansonca~ 1871 1 RC1 &lt;NA&gt; 25 120 29 39 11 3 0 16 ## 6 armstbo~ 1871 1 FW1 &lt;NA&gt; 12 49 9 11 2 1 0 5 ## 7 barkeal~ 1871 1 RC1 &lt;NA&gt; 1 4 0 1 0 0 0 2 ## 8 barnero~ 1871 1 BS1 &lt;NA&gt; 31 157 66 63 10 9 0 34 ## 9 barrebi~ 1871 1 FW1 &lt;NA&gt; 1 5 1 1 1 0 0 1 ## 10 barrofr~ 1871 1 BS1 &lt;NA&gt; 18 86 13 13 2 1 0 11 ## # ... with 102,806 more rows, and 9 more variables: SB &lt;dbl&gt;, CS &lt;dbl&gt;, BB &lt;dbl&gt;, ## # SO &lt;dbl&gt;, IBB &lt;dbl&gt;, HBP &lt;dbl&gt;, SH &lt;dbl&gt;, SF &lt;lgl&gt;, GIDP &lt;lgl&gt; Fix Read In Errors read_csv(&quot;data_files/Batting.csv&quot;, col_types = cols(SF = col_double(), GIDP = col_double())) ## # A tibble: 102,816 x 22 ## playerID yearID stint teamID lgID G AB R H `2B` `3B` HR RBI ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 abercda~ 1871 1 TRO &lt;NA&gt; 1 4 0 0 0 0 0 0 ## 2 addybo01 1871 1 RC1 &lt;NA&gt; 25 118 30 32 6 0 0 13 ## 3 allisar~ 1871 1 CL1 &lt;NA&gt; 29 137 28 40 4 5 0 19 ## 4 allisdo~ 1871 1 WS3 &lt;NA&gt; 27 133 28 44 10 2 2 27 ## 5 ansonca~ 1871 1 RC1 &lt;NA&gt; 25 120 29 39 11 3 0 16 ## 6 armstbo~ 1871 1 FW1 &lt;NA&gt; 12 49 9 11 2 1 0 5 ## 7 barkeal~ 1871 1 RC1 &lt;NA&gt; 1 4 0 1 0 0 0 2 ## 8 barnero~ 1871 1 BS1 &lt;NA&gt; 31 157 66 63 10 9 0 34 ## 9 barrebi~ 1871 1 FW1 &lt;NA&gt; 1 5 1 1 1 0 0 1 ## 10 barrofr~ 1871 1 BS1 &lt;NA&gt; 18 86 13 13 2 1 0 11 ## # ... with 102,806 more rows, and 9 more variables: SB &lt;dbl&gt;, CS &lt;dbl&gt;, BB &lt;dbl&gt;, ## # SO &lt;dbl&gt;, IBB &lt;dbl&gt;, HBP &lt;dbl&gt;, SH &lt;dbl&gt;, SF &lt;dbl&gt;, GIDP &lt;dbl&gt; read_csv(&quot;data_files/Batting.csv&quot;, guess_max = 10000) ## # A tibble: 102,816 x 22 ## playerID yearID stint teamID lgID G AB R H `2B` `3B` HR RBI ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 abercda~ 1871 1 TRO &lt;NA&gt; 1 4 0 0 0 0 0 0 ## 2 addybo01 1871 1 RC1 &lt;NA&gt; 25 118 30 32 6 0 0 13 ## 3 allisar~ 1871 1 CL1 &lt;NA&gt; 29 137 28 40 4 5 0 19 ## 4 allisdo~ 1871 1 WS3 &lt;NA&gt; 27 133 28 44 10 2 2 27 ## 5 ansonca~ 1871 1 RC1 &lt;NA&gt; 25 120 29 39 11 3 0 16 ## 6 armstbo~ 1871 1 FW1 &lt;NA&gt; 12 49 9 11 2 1 0 5 ## 7 barkeal~ 1871 1 RC1 &lt;NA&gt; 1 4 0 1 0 0 0 2 ## 8 barnero~ 1871 1 BS1 &lt;NA&gt; 31 157 66 63 10 9 0 34 ## 9 barrebi~ 1871 1 FW1 &lt;NA&gt; 1 5 1 1 1 0 0 1 ## 10 barrofr~ 1871 1 BS1 &lt;NA&gt; 18 86 13 13 2 1 0 11 ## # ... with 102,806 more rows, and 9 more variables: SB &lt;dbl&gt;, CS &lt;dbl&gt;, BB &lt;dbl&gt;, ## # SO &lt;dbl&gt;, IBB &lt;dbl&gt;, HBP &lt;dbl&gt;, SH &lt;dbl&gt;, SF &lt;dbl&gt;, GIDP &lt;dbl&gt; Clean Column Names read_csv(&quot;data_files/Batting.csv&quot;, col_types = cols(SF = col_double(), GIDP = col_double())) %&gt;% clean_names() ## # A tibble: 102,816 x 22 ## player_id year_id stint team_id lg_id g ab r h x2b x3b hr ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 abercda01 1871 1 TRO &lt;NA&gt; 1 4 0 0 0 0 0 ## 2 addybo01 1871 1 RC1 &lt;NA&gt; 25 118 30 32 6 0 0 ## 3 allisar01 1871 1 CL1 &lt;NA&gt; 29 137 28 40 4 5 0 ## 4 allisdo01 1871 1 WS3 &lt;NA&gt; 27 133 28 44 10 2 2 ## 5 ansonca01 1871 1 RC1 &lt;NA&gt; 25 120 29 39 11 3 0 ## 6 armstbo01 1871 1 FW1 &lt;NA&gt; 12 49 9 11 2 1 0 ## 7 barkeal01 1871 1 RC1 &lt;NA&gt; 1 4 0 1 0 0 0 ## 8 barnero01 1871 1 BS1 &lt;NA&gt; 31 157 66 63 10 9 0 ## 9 barrebi01 1871 1 FW1 &lt;NA&gt; 1 5 1 1 1 0 0 ## 10 barrofr01 1871 1 BS1 &lt;NA&gt; 18 86 13 13 2 1 0 ## # ... with 102,806 more rows, and 10 more variables: rbi &lt;dbl&gt;, sb &lt;dbl&gt;, cs &lt;dbl&gt;, ## # bb &lt;dbl&gt;, so &lt;dbl&gt;, ibb &lt;dbl&gt;, hbp &lt;dbl&gt;, sh &lt;dbl&gt;, sf &lt;dbl&gt;, gidp &lt;dbl&gt; 2.2 Analysis with dplyr Who has the highest career slugging percentage? Select data = read_csv(&quot;data_files/Batting.csv&quot;, col_types = cols(SF = col_double(), GIDP = col_double())) %&gt;% clean_names() data %&gt;% select(player_id,year_id,h,x2b,x3b,hr,ab, g) ## # A tibble: 102,816 x 8 ## player_id year_id h x2b x3b hr ab g ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 abercda01 1871 0 0 0 0 4 1 ## 2 addybo01 1871 32 6 0 0 118 25 ## 3 allisar01 1871 40 4 5 0 137 29 ## 4 allisdo01 1871 44 10 2 2 133 27 ## 5 ansonca01 1871 39 11 3 0 120 25 ## 6 armstbo01 1871 11 2 1 0 49 12 ## 7 barkeal01 1871 1 0 0 0 4 1 ## 8 barnero01 1871 63 10 9 0 157 31 ## 9 barrebi01 1871 1 1 0 0 5 1 ## 10 barrofr01 1871 13 2 1 0 86 18 ## # ... with 102,806 more rows Group_by data %&gt;% select(player_id,year_id,h,x2b,x3b,hr,ab, g) %&gt;% group_by(player_id) ## # A tibble: 102,816 x 8 ## # Groups: player_id [18,915] ## player_id year_id h x2b x3b hr ab g ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 abercda01 1871 0 0 0 0 4 1 ## 2 addybo01 1871 32 6 0 0 118 25 ## 3 allisar01 1871 40 4 5 0 137 29 ## 4 allisdo01 1871 44 10 2 2 133 27 ## 5 ansonca01 1871 39 11 3 0 120 25 ## 6 armstbo01 1871 11 2 1 0 49 12 ## 7 barkeal01 1871 1 0 0 0 4 1 ## 8 barnero01 1871 63 10 9 0 157 31 ## 9 barrebi01 1871 1 1 0 0 5 1 ## 10 barrofr01 1871 13 2 1 0 86 18 ## # ... with 102,806 more rows Summarise data %&gt;% select(player_id,year_id,h,x2b,x3b,hr,ab, g) %&gt;% group_by(player_id) %&gt;% summarise(h = sum(h), x2b = sum(x2b), x3b = sum(x3b), hr = sum(hr), ab = sum(ab), g = sum(g)) ## # A tibble: 18,915 x 7 ## player_id h x2b x3b hr ab g ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 aardsda01 0 0 0 0 4 331 ## 2 aaronha01 3771 624 98 755 12364 3298 ## 3 aaronto01 216 42 6 13 944 437 ## 4 aasedo01 0 0 0 0 5 448 ## 5 abadan01 2 0 0 0 21 15 ## 6 abadfe01 1 0 0 0 9 315 ## 7 abadijo01 11 0 0 0 49 12 ## 8 abbated01 772 99 43 11 3044 855 ## 9 abbeybe01 38 3 3 0 225 79 ## 10 abbeych01 492 67 46 19 1751 451 ## # ... with 18,905 more rows Filter data %&gt;% select(player_id,year_id,h,x2b,x3b,hr,ab, g) %&gt;% group_by(player_id) %&gt;% summarise(h = sum(h), x2b = sum(x2b), x3b = sum(x3b), hr = sum(hr), ab = sum(ab), g = sum(g)) %&gt;% filter(g&gt;1000) ## # A tibble: 1,564 x 7 ## player_id h x2b x3b hr ab g ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 aaronha01 3771 624 98 755 12364 3298 ## 2 abreubo01 2470 574 59 288 8480 2425 ## 3 adairje01 1022 163 19 57 4019 1165 ## 4 adamsbo03 1082 188 49 37 4019 1281 ## 5 adamssp01 1588 249 48 9 5557 1424 ## 6 adcocjo01 1832 295 35 336 6606 1959 ## 7 ageeto01 999 170 27 130 3912 1129 ## 8 ainsmed01 707 108 54 22 3048 1078 ## 9 alfoned01 1532 282 18 146 5385 1506 ## 10 alicelu01 1031 189 53 47 3971 1341 ## # ... with 1,554 more rows Mutate data %&gt;% select(player_id,year_id,h,x2b,x3b,hr,ab, g) %&gt;% group_by(player_id) %&gt;% summarise(h = sum(h), x2b = sum(x2b), x3b = sum(x3b), hr = sum(hr), ab = sum(ab), g = sum(g)) %&gt;% filter(g&gt;1000) %&gt;% mutate(slg = (h + x2b + 2*x3b + 3*hr)/ab) ## # A tibble: 1,564 x 8 ## player_id h x2b x3b hr ab g slg ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 aaronha01 3771 624 98 755 12364 3298 0.555 ## 2 abreubo01 2470 574 59 288 8480 2425 0.475 ## 3 adairje01 1022 163 19 57 4019 1165 0.347 ## 4 adamsbo03 1082 188 49 37 4019 1281 0.368 ## 5 adamssp01 1588 249 48 9 5557 1424 0.353 ## 6 adcocjo01 1832 295 35 336 6606 1959 0.485 ## 7 ageeto01 999 170 27 130 3912 1129 0.412 ## 8 ainsmed01 707 108 54 22 3048 1078 0.324 ## 9 alfoned01 1532 282 18 146 5385 1506 0.425 ## 10 alicelu01 1031 189 53 47 3971 1341 0.369 ## # ... with 1,554 more rows Arrange slgdata = data %&gt;% select(player_id,year_id,h,x2b,x3b,hr,ab, g) %&gt;% group_by(player_id) %&gt;% summarise(h = sum(h), x2b = sum(x2b), x3b = sum(x3b), hr = sum(hr), ab = sum(ab), g = sum(g)) %&gt;% filter(g&gt;1000) %&gt;% mutate(slg = (h + x2b + 2*x3b + 3*hr)/ab) %&gt;% arrange(desc(slg)) slgdata ## # A tibble: 1,564 x 8 ## player_id h x2b x3b hr ab g slg ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ruthba01 2873 506 136 714 8398 2503 0.690 ## 2 willite01 2654 525 71 521 7706 2292 0.634 ## 3 gehrilo01 2721 534 163 493 8001 2164 0.632 ## 4 foxxji01 2646 458 125 534 8134 2317 0.609 ## 5 bondsba01 2935 601 77 762 9847 2986 0.607 ## 6 greenha01 1628 379 71 331 5193 1394 0.605 ## 7 mcgwima01 1626 252 6 583 6187 1874 0.588 ## 8 ramirma02 2574 547 20 555 8244 2302 0.585 ## 9 dimagjo01 2214 389 131 361 6821 1736 0.579 ## 10 hornsro01 2930 541 169 301 8173 2259 0.577 ## # ... with 1,554 more rows 2.3 Joins Player ID Data read_csv(&quot;data_files/Master.csv&quot;) ## # A tibble: 19,105 x 24 ## playerID birthYear birthMonth birthDay birthCountry birthState birthCity deathYear ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 aardsda~ 1981 12 27 USA CO Denver NA ## 2 aaronha~ 1934 2 5 USA AL Mobile NA ## 3 aaronto~ 1939 8 5 USA AL Mobile 1984 ## 4 aasedo01 1954 9 8 USA CA Orange NA ## 5 abadan01 1972 8 25 USA FL Palm Bea~ NA ## 6 abadfe01 1985 12 17 D.R. La Romana La Romana NA ## 7 abadijo~ 1850 11 4 USA PA Philadel~ 1905 ## 8 abbated~ 1877 4 15 USA PA Latrobe 1957 ## 9 abbeybe~ 1869 11 11 USA VT Essex 1962 ## 10 abbeych~ 1866 10 14 USA NE Falls Ci~ 1926 ## # ... with 19,095 more rows, and 16 more variables: deathMonth &lt;dbl&gt;, ## # deathDay &lt;dbl&gt;, deathCountry &lt;chr&gt;, deathState &lt;chr&gt;, deathCity &lt;chr&gt;, ## # nameFirst &lt;chr&gt;, nameLast &lt;chr&gt;, nameGiven &lt;chr&gt;, weight &lt;dbl&gt;, height &lt;dbl&gt;, ## # bats &lt;chr&gt;, throws &lt;chr&gt;, debut &lt;date&gt;, finalGame &lt;date&gt;, retroID &lt;chr&gt;, ## # bbrefID &lt;chr&gt; read_csv(&quot;data_files/Master.csv&quot;) %&gt;% select(playerID, nameFirst, nameLast) %&gt;% mutate(player = paste(nameFirst,nameLast)) %&gt;% select(-starts_with(&quot;name&quot;)) ## # A tibble: 19,105 x 2 ## playerID player ## &lt;chr&gt; &lt;chr&gt; ## 1 aardsda01 David Aardsma ## 2 aaronha01 Hank Aaron ## 3 aaronto01 Tommie Aaron ## 4 aasedo01 Don Aase ## 5 abadan01 Andy Abad ## 6 abadfe01 Fernando Abad ## 7 abadijo01 John Abadie ## 8 abbated01 Ed Abbaticchio ## 9 abbeybe01 Bert Abbey ## 10 abbeych01 Charlie Abbey ## # ... with 19,095 more rows master = read_csv(&quot;data_files/Master.csv&quot;) %&gt;% select(playerID, nameFirst, nameLast) %&gt;% mutate(player = paste(nameFirst,nameLast)) %&gt;% select(-starts_with(&quot;name&quot;)) Join the Data slgdata %&gt;% left_join(master, by = c(&quot;player_id&quot; = &quot;playerID&quot;)) ## # A tibble: 1,564 x 9 ## player_id h x2b x3b hr ab g slg player ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 ruthba01 2873 506 136 714 8398 2503 0.690 Babe Ruth ## 2 willite01 2654 525 71 521 7706 2292 0.634 Ted Williams ## 3 gehrilo01 2721 534 163 493 8001 2164 0.632 Lou Gehrig ## 4 foxxji01 2646 458 125 534 8134 2317 0.609 Jimmie Foxx ## 5 bondsba01 2935 601 77 762 9847 2986 0.607 Barry Bonds ## 6 greenha01 1628 379 71 331 5193 1394 0.605 Hank Greenberg ## 7 mcgwima01 1626 252 6 583 6187 1874 0.588 Mark McGwire ## 8 ramirma02 2574 547 20 555 8244 2302 0.585 Manny Ramirez ## 9 dimagjo01 2214 389 131 361 6821 1736 0.579 Joe DiMaggio ## 10 hornsro01 2930 541 169 301 8173 2259 0.577 Rogers Hornsby ## # ... with 1,554 more rows slgname = slgdata %&gt;% left_join(master, by = c(&quot;player_id&quot; = &quot;playerID&quot;)) Rename Columns slgname %&gt;% rename(doubles = x2b, triples = x3b) ## # A tibble: 1,564 x 9 ## player_id h doubles triples hr ab g slg player ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 ruthba01 2873 506 136 714 8398 2503 0.690 Babe Ruth ## 2 willite01 2654 525 71 521 7706 2292 0.634 Ted Williams ## 3 gehrilo01 2721 534 163 493 8001 2164 0.632 Lou Gehrig ## 4 foxxji01 2646 458 125 534 8134 2317 0.609 Jimmie Foxx ## 5 bondsba01 2935 601 77 762 9847 2986 0.607 Barry Bonds ## 6 greenha01 1628 379 71 331 5193 1394 0.605 Hank Greenberg ## 7 mcgwima01 1626 252 6 583 6187 1874 0.588 Mark McGwire ## 8 ramirma02 2574 547 20 555 8244 2302 0.585 Manny Ramirez ## 9 dimagjo01 2214 389 131 361 6821 1736 0.579 Joe DiMaggio ## 10 hornsro01 2930 541 169 301 8173 2259 0.577 Rogers Hornsby ## # ... with 1,554 more rows slgname = slgname %&gt;% rename(doubles = x2b, triples = x3b) Reorder Columns slgname %&gt;% select(player_id, player, everything()) ## # A tibble: 1,564 x 9 ## player_id player h doubles triples hr ab g slg ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ruthba01 Babe Ruth 2873 506 136 714 8398 2503 0.690 ## 2 willite01 Ted Williams 2654 525 71 521 7706 2292 0.634 ## 3 gehrilo01 Lou Gehrig 2721 534 163 493 8001 2164 0.632 ## 4 foxxji01 Jimmie Foxx 2646 458 125 534 8134 2317 0.609 ## 5 bondsba01 Barry Bonds 2935 601 77 762 9847 2986 0.607 ## 6 greenha01 Hank Greenberg 1628 379 71 331 5193 1394 0.605 ## 7 mcgwima01 Mark McGwire 1626 252 6 583 6187 1874 0.588 ## 8 ramirma02 Manny Ramirez 2574 547 20 555 8244 2302 0.585 ## 9 dimagjo01 Joe DiMaggio 2214 389 131 361 6821 1736 0.579 ## 10 hornsro01 Rogers Hornsby 2930 541 169 301 8173 2259 0.577 ## # ... with 1,554 more rows slgname = slgname %&gt;% select(player_id, player, everything()) 2.4 Other dplyr Tricks Count data ## # A tibble: 102,816 x 22 ## player_id year_id stint team_id lg_id g ab r h x2b x3b hr ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 abercda01 1871 1 TRO &lt;NA&gt; 1 4 0 0 0 0 0 ## 2 addybo01 1871 1 RC1 &lt;NA&gt; 25 118 30 32 6 0 0 ## 3 allisar01 1871 1 CL1 &lt;NA&gt; 29 137 28 40 4 5 0 ## 4 allisdo01 1871 1 WS3 &lt;NA&gt; 27 133 28 44 10 2 2 ## 5 ansonca01 1871 1 RC1 &lt;NA&gt; 25 120 29 39 11 3 0 ## 6 armstbo01 1871 1 FW1 &lt;NA&gt; 12 49 9 11 2 1 0 ## 7 barkeal01 1871 1 RC1 &lt;NA&gt; 1 4 0 1 0 0 0 ## 8 barnero01 1871 1 BS1 &lt;NA&gt; 31 157 66 63 10 9 0 ## 9 barrebi01 1871 1 FW1 &lt;NA&gt; 1 5 1 1 1 0 0 ## 10 barrofr01 1871 1 BS1 &lt;NA&gt; 18 86 13 13 2 1 0 ## # ... with 102,806 more rows, and 10 more variables: rbi &lt;dbl&gt;, sb &lt;dbl&gt;, cs &lt;dbl&gt;, ## # bb &lt;dbl&gt;, so &lt;dbl&gt;, ibb &lt;dbl&gt;, hbp &lt;dbl&gt;, sh &lt;dbl&gt;, sf &lt;dbl&gt;, gidp &lt;dbl&gt; data %&gt;% count(player_id) ## # A tibble: 18,915 x 2 ## player_id n ## &lt;chr&gt; &lt;int&gt; ## 1 aardsda01 9 ## 2 aaronha01 23 ## 3 aaronto01 7 ## 4 aasedo01 13 ## 5 abadan01 3 ## 6 abadfe01 8 ## 7 abadijo01 2 ## 8 abbated01 10 ## 9 abbeybe01 6 ## 10 abbeych01 5 ## # ... with 18,905 more rows data %&gt;% count(player_id, sort = TRUE) ## # A tibble: 18,915 x 2 ## player_id n ## &lt;chr&gt; &lt;int&gt; ## 1 mcguide01 31 ## 2 henderi01 29 ## 3 newsobo01 29 ## 4 johnto01 28 ## 5 kaatji01 28 ## 6 ansonca01 27 ## 7 baineha01 27 ## 8 carltst01 27 ## 9 moyerja01 27 ## 10 ryanno01 27 ## # ... with 18,905 more rows Uncount slgname %&gt;% uncount(triples) ## # A tibble: 80,303 x 8 ## player_id player h doubles hr ab g slg ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ruthba01 Babe Ruth 2873 506 714 8398 2503 0.690 ## 2 ruthba01 Babe Ruth 2873 506 714 8398 2503 0.690 ## 3 ruthba01 Babe Ruth 2873 506 714 8398 2503 0.690 ## 4 ruthba01 Babe Ruth 2873 506 714 8398 2503 0.690 ## 5 ruthba01 Babe Ruth 2873 506 714 8398 2503 0.690 ## 6 ruthba01 Babe Ruth 2873 506 714 8398 2503 0.690 ## 7 ruthba01 Babe Ruth 2873 506 714 8398 2503 0.690 ## 8 ruthba01 Babe Ruth 2873 506 714 8398 2503 0.690 ## 9 ruthba01 Babe Ruth 2873 506 714 8398 2503 0.690 ## 10 ruthba01 Babe Ruth 2873 506 714 8398 2503 0.690 ## # ... with 80,293 more rows Summarise data %&gt;% select(player_id,year_id,h,x2b,x3b,hr,ab, g) %&gt;% group_by(player_id) %&gt;% summarise(h = sum(h), x2b = sum(x2b), x3b = sum(x3b), hr = sum(hr), ab = sum(ab), g = sum(g)) ## # A tibble: 18,915 x 7 ## player_id h x2b x3b hr ab g ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 aardsda01 0 0 0 0 4 331 ## 2 aaronha01 3771 624 98 755 12364 3298 ## 3 aaronto01 216 42 6 13 944 437 ## 4 aasedo01 0 0 0 0 5 448 ## 5 abadan01 2 0 0 0 21 15 ## 6 abadfe01 1 0 0 0 9 315 ## 7 abadijo01 11 0 0 0 49 12 ## 8 abbated01 772 99 43 11 3044 855 ## 9 abbeybe01 38 3 3 0 225 79 ## 10 abbeych01 492 67 46 19 1751 451 ## # ... with 18,905 more rows data %&gt;% select(player_id,year_id,h,x2b,x3b,hr,ab, g) %&gt;% group_by(player_id) %&gt;% summarise_at(vars(-year_id),~sum(.)) ## # A tibble: 18,915 x 7 ## player_id h x2b x3b hr ab g ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 aardsda01 0 0 0 0 4 331 ## 2 aaronha01 3771 624 98 755 12364 3298 ## 3 aaronto01 216 42 6 13 944 437 ## 4 aasedo01 0 0 0 0 5 448 ## 5 abadan01 2 0 0 0 21 15 ## 6 abadfe01 1 0 0 0 9 315 ## 7 abadijo01 11 0 0 0 49 12 ## 8 abbated01 772 99 43 11 3044 855 ## 9 abbeybe01 38 3 3 0 225 79 ## 10 abbeych01 492 67 46 19 1751 451 ## # ... with 18,905 more rows "],
["3-data-visualization.html", "3 Data Visualization 3.1 Bar Chart Scatter Plot 3.2 Animation", " 3 Data Visualization 3.1 Bar Chart slgname ## # A tibble: 1,564 x 9 ## player_id player h doubles triples hr ab g slg ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ruthba01 Babe Ruth 2873 506 136 714 8398 2503 0.690 ## 2 willite01 Ted Williams 2654 525 71 521 7706 2292 0.634 ## 3 gehrilo01 Lou Gehrig 2721 534 163 493 8001 2164 0.632 ## 4 foxxji01 Jimmie Foxx 2646 458 125 534 8134 2317 0.609 ## 5 bondsba01 Barry Bonds 2935 601 77 762 9847 2986 0.607 ## 6 greenha01 Hank Greenberg 1628 379 71 331 5193 1394 0.605 ## 7 mcgwima01 Mark McGwire 1626 252 6 583 6187 1874 0.588 ## 8 ramirma02 Manny Ramirez 2574 547 20 555 8244 2302 0.585 ## 9 dimagjo01 Joe DiMaggio 2214 389 131 361 6821 1736 0.579 ## 10 hornsro01 Rogers Hornsby 2930 541 169 301 8173 2259 0.577 ## # ... with 1,554 more rows Canvas slgname %&gt;% ggplot() Mapping slgname %&gt;% ggplot(aes(x=player, y = hr)) Filter Data slgname %&gt;% top_n(20, h) %&gt;% ggplot(aes(x=player, y = hr)) Plot ‘mechanism’ slgname %&gt;% top_n(20, h) %&gt;% ggplot(aes(x=player, y = hr)) + geom_col() Coordinate Flip slgname %&gt;% top_n(20, h) %&gt;% ggplot(aes(x=player, y = hr)) + geom_col() + coord_flip() Reorder Factors slgname %&gt;% top_n(20, h) %&gt;% ggplot(aes(x=fct_reorder(player,hr), y = hr)) + geom_col() + coord_flip() Color Bars slgname %&gt;% top_n(20, h) %&gt;% ggplot(aes(x=fct_reorder(player,hr), y = hr, fill = slg)) + geom_col() + coord_flip() Update Labels slgname %&gt;% top_n(20, h) %&gt;% ggplot(aes(x=fct_reorder(player,hr), y = hr, fill = slg)) + geom_col() + coord_flip() + labs(x = &quot;Player&quot;, y = &quot;Home Runs&quot;, title = &quot;Top 20 Home Run Hitters&quot;, fill = &quot;Slugging Percentage&quot;, subtitle = &quot;1871-2016&quot;, caption = &quot;*Among Players Who&#39;ve Played at least 1000 games&quot;) Scatter Plot scatterdat = data %&gt;% filter(lg_id == &quot;AL&quot;) %&gt;% mutate(team_id = fct_lump(team_id, n = 12)) %&gt;% filter(team_id != &quot;Other&quot;) %&gt;% filter(complete.cases(.)) %&gt;% filter(year_id&gt;1990) %&gt;% group_by(team_id,year_id) %&gt;% summarise_at(vars(g:gidp), ~sum(.)) scatterdat ## # A tibble: 260 x 19 ## # Groups: team_id [10] ## team_id year_id g ab r h x2b x3b hr rbi sb cs bb ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 BAL 1991 2365 5604 686 1421 256 29 170 660 50 33 528 ## 2 BAL 1992 2183 5485 705 1423 243 36 148 680 89 48 647 ## 3 BAL 1993 2127 5508 786 1470 287 24 157 744 73 54 655 ## 4 BAL 1994 1473 3856 589 1047 185 20 139 557 69 13 438 ## 5 BAL 1995 2046 4837 704 1267 229 27 173 668 92 45 574 ## 6 BAL 1996 2245 5689 949 1557 299 29 257 914 76 40 645 ## 7 BAL 1997 2282 5584 812 1498 264 22 196 780 63 26 586 ## 8 BAL 1998 2359 5565 817 1520 303 11 214 783 86 48 593 ## 9 BAL 1999 2300 5637 851 1572 299 21 203 804 107 46 615 ## 10 BAL 2000 2210 5549 794 1508 310 22 184 750 126 65 558 ## # ... with 250 more rows, and 6 more variables: so &lt;dbl&gt;, ibb &lt;dbl&gt;, hbp &lt;dbl&gt;, ## # sh &lt;dbl&gt;, sf &lt;dbl&gt;, gidp &lt;dbl&gt; Canvas scatterdat %&gt;% ggplot() Mapping scatterdat %&gt;% ggplot(aes(x=year_id,y=hr,color = fct_reorder(team_id,-hr))) Plot ‘mechanism’: geom_point() scatterdat %&gt;% ggplot(aes(x=year_id,y=hr,color = fct_reorder(team_id,-hr))) + geom_point() Plot ‘mechanism’: geom_smooth() scatterdat %&gt;% ggplot(aes(x=year_id,y=hr)) + geom_point(aes(color = fct_reorder(team_id,-hr))) + geom_smooth() Facet Plots scatterdat %&gt;% ggplot(aes(x=year_id,y=hr)) + geom_point(aes(color = fct_reorder(team_id,-hr))) + geom_smooth() + facet_wrap(~team_id) Update Labels scatterdat %&gt;% ggplot(aes(x=year_id,y=hr)) + geom_point(aes(color = fct_reorder(team_id,-hr))) + geom_smooth() + facet_wrap(~team_id) + labs(title = &quot;Home Run Changes Over Time&quot;, subtitle = paste(&quot;From&quot;, min(scatterdat$year_id), &quot;to&quot;, max(scatterdat$year_id)), color = &quot;Team&quot;, x = &quot;Season&quot;, y = &quot;Season Home Run Total&quot;) Change Smoothing Line scatterdat %&gt;% ggplot(aes(x=year_id,y=hr)) + geom_point(aes(color = fct_reorder(team_id,-hr))) + geom_smooth(method = &quot;lm&quot;) + facet_wrap(~team_id) + labs(title = &quot;Home Run Changes Over Time&quot;, subtitle = paste(&quot;From&quot;, min(scatterdat$year_id), &quot;to&quot;, max(scatterdat$year_id)), color = &quot;Team&quot;, x = &quot;Season&quot;, y = &quot;Season Home Run Total&quot;) 3.2 Animation library(gganimate) animdata = data %&gt;% filter(!is.na(lg_id)) %&gt;% group_by(year_id, team_id) %&gt;% summarise_at(vars(hr, so, bb, ab), ~ sum(., na.rm = TRUE)) %&gt;% ungroup() %&gt;% inner_join(data %&gt;% select(year_id, team_id, lg_id) %&gt;% distinct()) animdata ## # A tibble: 2,785 x 7 ## year_id team_id hr so bb ab lg_id ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1876 BSN 9 98 58 2722 NL ## 2 1876 CHN 8 45 70 2748 NL ## 3 1876 CN1 4 136 41 2372 NL ## 4 1876 HAR 2 78 39 2664 NL ## 5 1876 LS1 6 98 24 2570 NL ## 6 1876 NY3 2 35 18 2180 NL ## 7 1876 PHN 7 36 27 2387 NL ## 8 1876 SL3 2 63 59 2478 NL ## 9 1877 BSN 4 121 65 2368 NL ## 10 1877 CHN 0 111 57 2273 NL ## # ... with 2,775 more rows p = animdata %&gt;% ggplot(aes(x = so,y = hr, color = bb,size = ab,group = year_id)) + geom_point() + facet_wrap(~ lg_id) + transition_states(year_id,transition_length = 1,state_length = 30) + labs(title = &#39;Year: {closest_state}&#39;) + enter_fade() + exit_fade() animate(p,nframes = length(unique(data$year_id)) * 2) ## Frame 1 (0%) Frame 2 (0%) Frame 3 (1%) Frame 4 (1%) Frame 5 (1%) Frame 6 (2%) Frame 7 (2%) Frame 8 (2%) Frame 9 (3%) Frame 10 (3%) Frame 11 (3%) Frame 12 (4%) Frame 13 (4%) Frame 14 (4%) Frame 15 (5%) Frame 16 (5%) Frame 17 (5%) Frame 18 (6%) Frame 19 (6%) Frame 20 (6%) Frame 21 (7%) Frame 22 (7%) Frame 23 (7%) Frame 24 (8%) Frame 25 (8%) Frame 26 (8%) Frame 27 (9%) Frame 28 (9%) Frame 29 (9%) Frame 30 (10%) Frame 31 (10%) Frame 32 (10%) Frame 33 (11%) Frame 34 (11%) Frame 35 (11%) Frame 36 (12%) Frame 37 (12%) Frame 38 (13%) Frame 39 (13%) Frame 40 (13%) Frame 41 (14%) Frame 42 (14%) Frame 43 (14%) Frame 44 (15%) Frame 45 (15%) Frame 46 (15%) Frame 47 (16%) Frame 48 (16%) Frame 49 (16%) Frame 50 (17%) Frame 51 (17%) Frame 52 (17%) Frame 53 (18%) Frame 54 (18%) Frame 55 (18%) Frame 56 (19%) Frame 57 (19%) Frame 58 (19%) Frame 59 (20%) Frame 60 (20%) Frame 61 (20%) Frame 62 (21%) Frame 63 (21%) Frame 64 (21%) Frame 65 (22%) Frame 66 (22%) Frame 67 (22%) Frame 68 (23%) Frame 69 (23%) Frame 70 (23%) Frame 71 (24%) Frame 72 (24%) Frame 73 (25%) Frame 74 (25%) Frame 75 (25%) Frame 76 (26%) Frame 77 (26%) Frame 78 (26%) Frame 79 (27%) Frame 80 (27%) Frame 81 (27%) Frame 82 (28%) Frame 83 (28%) Frame 84 (28%) Frame 85 (29%) Frame 86 (29%) Frame 87 (29%) Frame 88 (30%) Frame 89 (30%) Frame 90 (30%) Frame 91 (31%) Frame 92 (31%) Frame 93 (31%) Frame 94 (32%) Frame 95 (32%) Frame 96 (32%) Frame 97 (33%) Frame 98 (33%) Frame 99 (33%) Frame 100 (34%) Frame 101 (34%) Frame 102 (34%) Frame 103 (35%) Frame 104 (35%) Frame 105 (35%) Frame 106 (36%) Frame 107 (36%) Frame 108 (36%) Frame 109 (37%) Frame 110 (37%) Frame 111 (38%) Frame 112 (38%) Frame 113 (38%) Frame 114 (39%) Frame 115 (39%) Frame 116 (39%) Frame 117 (40%) Frame 118 (40%) Frame 119 (40%) Frame 120 (41%) Frame 121 (41%) Frame 122 (41%) Frame 123 (42%) Frame 124 (42%) Frame 125 (42%) Frame 126 (43%) Frame 127 (43%) Frame 128 (43%) Frame 129 (44%) Frame 130 (44%) Frame 131 (44%) Frame 132 (45%) Frame 133 (45%) Frame 134 (45%) Frame 135 (46%) Frame 136 (46%) Frame 137 (46%) Frame 138 (47%) Frame 139 (47%) Frame 140 (47%) Frame 141 (48%) Frame 142 (48%) Frame 143 (48%) Frame 144 (49%) Frame 145 (49%) Frame 146 (50%) Frame 147 (50%) Frame 148 (50%) Frame 149 (51%) Frame 150 (51%) Frame 151 (51%) Frame 152 (52%) Frame 153 (52%) Frame 154 (52%) Frame 155 (53%) Frame 156 (53%) Frame 157 (53%) Frame 158 (54%) Frame 159 (54%) Frame 160 (54%) Frame 161 (55%) Frame 162 (55%) Frame 163 (55%) Frame 164 (56%) Frame 165 (56%) Frame 166 (56%) Frame 167 (57%) Frame 168 (57%) Frame 169 (57%) Frame 170 (58%) Frame 171 (58%) Frame 172 (58%) Frame 173 (59%) Frame 174 (59%) Frame 175 (59%) Frame 176 (60%) Frame 177 (60%) Frame 178 (60%) Frame 179 (61%) Frame 180 (61%) Frame 181 (61%) Frame 182 (62%) Frame 183 (62%) Frame 184 (63%) Frame 185 (63%) Frame 186 (63%) Frame 187 (64%) Frame 188 (64%) Frame 189 (64%) Frame 190 (65%) Frame 191 (65%) Frame 192 (65%) Frame 193 (66%) Frame 194 (66%) Frame 195 (66%) Frame 196 (67%) Frame 197 (67%) Frame 198 (67%) Frame 199 (68%) Frame 200 (68%) Frame 201 (68%) Frame 202 (69%) Frame 203 (69%) Frame 204 (69%) Frame 205 (70%) Frame 206 (70%) Frame 207 (70%) Frame 208 (71%) Frame 209 (71%) Frame 210 (71%) Frame 211 (72%) Frame 212 (72%) Frame 213 (72%) Frame 214 (73%) Frame 215 (73%) Frame 216 (73%) Frame 217 (74%) Frame 218 (74%) Frame 219 (75%) Frame 220 (75%) Frame 221 (75%) Frame 222 (76%) Frame 223 (76%) Frame 224 (76%) Frame 225 (77%) Frame 226 (77%) Frame 227 (77%) Frame 228 (78%) Frame 229 (78%) Frame 230 (78%) Frame 231 (79%) Frame 232 (79%) Frame 233 (79%) Frame 234 (80%) Frame 235 (80%) Frame 236 (80%) Frame 237 (81%) Frame 238 (81%) Frame 239 (81%) Frame 240 (82%) Frame 241 (82%) Frame 242 (82%) Frame 243 (83%) Frame 244 (83%) Frame 245 (83%) Frame 246 (84%) Frame 247 (84%) Frame 248 (84%) Frame 249 (85%) Frame 250 (85%) Frame 251 (85%) Frame 252 (86%) Frame 253 (86%) Frame 254 (86%) Frame 255 (87%) Frame 256 (87%) Frame 257 (88%) Frame 258 (88%) Frame 259 (88%) Frame 260 (89%) Frame 261 (89%) Frame 262 (89%) Frame 263 (90%) Frame 264 (90%) Frame 265 (90%) Frame 266 (91%) Frame 267 (91%) Frame 268 (91%) Frame 269 (92%) Frame 270 (92%) Frame 271 (92%) Frame 272 (93%) Frame 273 (93%) Frame 274 (93%) Frame 275 (94%) Frame 276 (94%) Frame 277 (94%) Frame 278 (95%) Frame 279 (95%) Frame 280 (95%) Frame 281 (96%) Frame 282 (96%) Frame 283 (96%) Frame 284 (97%) Frame 285 (97%) Frame 286 (97%) Frame 287 (98%) Frame 288 (98%) Frame 289 (98%) Frame 290 (99%) Frame 291 (99%) Frame 292 (100%) ## Finalizing encoding... done! "],
["4-data-modeling.html", "4 Data Modeling 4.1 Load Packages 4.2 Read Data 4.3 Data Exploration 4.4 Split Data test/train 4.5 Preprocess Data 4.6 Apply Preprocessing 4.7 Prepare Cross Validation 4.8 Specify Models 4.9 Create Grid of Parameters to Validate Over 4.10 Execute Cross Validation 4.11 Select Best Parameters 4.12 Save Best Paramenters 4.13 Compare Models 4.14 Run Best Model on All Data 4.15 Run Model on New Data 4.16 Variable Importance", " 4 Data Modeling 4.1 Load Packages library(tidymodels) library(tune) library(dials) library(parsnip) library(rsample) library(recipes) library(textrecipes) library(yardstick) library(vip) library(gghighlight) library(patchwork) library(tidyverse) library(tidyquant) library(knitr) library(janitor) 4.2 Read Data data = read_csv(&quot;data_files/Batting.csv&quot;, col_types = cols(SF = col_double(), GIDP = col_double())) %&gt;% clean_names() hofdata = read_csv(&quot;data_files/HallOfFame.csv&quot;) %&gt;% clean_names() %&gt;% select(player_id, inducted) %&gt;% mutate(hof = ifelse(inducted==&quot;Y&quot;,1,0)) %&gt;% filter(hof==1) hofdata %&gt;% count(inducted) ## # A tibble: 1 x 2 ## inducted n ## &lt;chr&gt; &lt;int&gt; ## 1 Y 317 retiredyear = data %&gt;% group_by(player_id) %&gt;% summarise(lastyear = max(year_id)) retiredyear ## # A tibble: 18,915 x 2 ## player_id lastyear ## &lt;chr&gt; &lt;dbl&gt; ## 1 aardsda01 2015 ## 2 aaronha01 1976 ## 3 aaronto01 1971 ## 4 aasedo01 1990 ## 5 abadan01 2006 ## 6 abadfe01 2016 ## 7 abadijo01 1875 ## 8 abbated01 1910 ## 9 abbeybe01 1896 ## 10 abbeych01 1897 ## # ... with 18,905 more rows hof = data %&gt;% group_by(player_id) %&gt;% summarise_at(vars(g:gidp), list(~sum(.,na.rm = TRUE))) %&gt;% ungroup() %&gt;% left_join(retiredyear) %&gt;% left_join(hofdata) %&gt;% mutate(inducted = if_else(inducted==&quot;Y&quot;,1,0)) %&gt;% mutate(inducted = replace_na(inducted, 0)) %&gt;% filter(g&gt;=1000) %&gt;% mutate(inducted = as.factor(inducted)) %&gt;% select(-hof) hof ## # A tibble: 1,565 x 20 ## player_id g ab r h x2b x3b hr rbi sb cs bb so ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 aaronha01 3298 12364 2174 3771 624 98 755 2297 240 73 1402 1383 ## 2 abreubo01 2425 8480 1453 2470 574 59 288 1363 400 128 1476 1840 ## 3 adairje01 1165 4019 378 1022 163 19 57 366 29 29 208 499 ## 4 adamsbo03 1281 4019 591 1082 188 49 37 303 67 30 414 447 ## 5 adamssp01 1424 5557 844 1588 249 48 9 394 154 50 453 223 ## 6 adcocjo01 1959 6606 823 1832 295 35 336 1122 20 25 594 1059 ## 7 ageeto01 1129 3912 558 999 170 27 130 433 167 81 342 918 ## 8 ainsmed01 1078 3048 299 707 108 54 22 317 86 16 263 315 ## 9 alfoned01 1506 5385 777 1532 282 18 146 744 53 17 596 617 ## 10 alicelu01 1341 3971 551 1031 189 53 47 422 81 50 500 624 ## # ... with 1,555 more rows, and 7 more variables: ibb &lt;dbl&gt;, hbp &lt;dbl&gt;, sh &lt;dbl&gt;, ## # sf &lt;dbl&gt;, gidp &lt;dbl&gt;, lastyear &lt;dbl&gt;, inducted &lt;fct&gt; Filter for HOF Eligable Players hof %&gt;% filter(lastyear &lt;= 2012) %&gt;% count(inducted) ## # A tibble: 2 x 2 ## inducted n ## &lt;fct&gt; &lt;int&gt; ## 1 0 1229 ## 2 1 168 hofmod = hof %&gt;% filter(lastyear &lt;= 2012) %&gt;% select(-lastyear) hofmod ## # A tibble: 1,397 x 19 ## player_id g ab r h x2b x3b hr rbi sb cs bb so ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 aaronha01 3298 12364 2174 3771 624 98 755 2297 240 73 1402 1383 ## 2 adairje01 1165 4019 378 1022 163 19 57 366 29 29 208 499 ## 3 adamsbo03 1281 4019 591 1082 188 49 37 303 67 30 414 447 ## 4 adamssp01 1424 5557 844 1588 249 48 9 394 154 50 453 223 ## 5 adcocjo01 1959 6606 823 1832 295 35 336 1122 20 25 594 1059 ## 6 ageeto01 1129 3912 558 999 170 27 130 433 167 81 342 918 ## 7 ainsmed01 1078 3048 299 707 108 54 22 317 86 16 263 315 ## 8 alfoned01 1506 5385 777 1532 282 18 146 744 53 17 596 617 ## 9 alicelu01 1341 3971 551 1031 189 53 47 422 81 50 500 624 ## 10 allenbe01 1139 3404 357 815 140 21 73 351 13 16 370 424 ## # ... with 1,387 more rows, and 6 more variables: ibb &lt;dbl&gt;, hbp &lt;dbl&gt;, sh &lt;dbl&gt;, ## # sf &lt;dbl&gt;, gidp &lt;dbl&gt;, inducted &lt;fct&gt; hoftest = hof %&gt;% filter(lastyear &gt; 2012) %&gt;% select(-lastyear,-inducted) hoftest ## # A tibble: 168 x 18 ## player_id g ab r h x2b x3b hr rbi sb cs bb so ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 abreubo01 2425 8480 1453 2470 574 59 288 1363 400 128 1476 1840 ## 2 andruel01 1221 4625 648 1266 207 37 35 436 241 83 408 684 ## 3 aybarer01 1346 4842 606 1324 241 45 51 451 144 58 257 613 ## 4 barmecl01 1186 3805 434 932 208 17 89 415 43 30 216 734 ## 5 bautijo02 1519 5139 878 1311 267 17 308 862 60 26 881 1113 ## 6 bayja01 1278 4505 737 1200 240 30 222 754 95 17 636 1216 ## 7 beltrad01 2720 10295 1428 2942 591 36 445 1571 119 42 775 1584 ## 8 beltrca01 2457 9301 1522 2617 536 78 421 1536 312 49 1051 1693 ## 9 berkmla01 1879 6491 1146 1905 422 30 366 1234 86 48 1201 1300 ## 10 betanyu01 1156 4052 437 1057 218 29 80 457 30 30 143 435 ## # ... with 158 more rows, and 5 more variables: ibb &lt;dbl&gt;, hbp &lt;dbl&gt;, sh &lt;dbl&gt;, ## # sf &lt;dbl&gt;, gidp &lt;dbl&gt; 4.3 Data Exploration hofmod %&gt;% select(g:inducted) %&gt;% pivot_longer(cols = g:gidp) %&gt;% ggplot(aes(x=value,y=as.factor(inducted),color = name)) + geom_point() + theme(legend.position = &quot;none&quot;) + facet_wrap(~name, scales = &quot;free&quot;) 4.4 Split Data test/train set.seed(as.numeric(as.factor(&quot;beatnavy&quot;))) hof_initial_split = initial_split(hofmod, prop = 0.80) hof_initial_split ## &lt;1118/279/1397&gt; 4.5 Preprocess Data preprocessing_recipe = recipe(inducted ~ ., data = training(hof_initial_split)) %&gt;% step_knnimpute(all_numeric()) %&gt;% step_center(all_numeric()) %&gt;% step_scale(all_numeric()) %&gt;% step_rm(player_id) %&gt;% prep() preprocessing_recipe ## Data Recipe ## ## Inputs: ## ## role #variables ## outcome 1 ## predictor 18 ## ## Training data contained 1118 data points and no missing data. ## ## Operations: ## ## K-nearest neighbor imputation for player_id, ab, r, h, x2b, x3b, hr, rbi, sb, cs, ... [trained] ## Centering for g, ab, r, h, x2b, x3b, hr, rbi, sb, cs, bb, so, ... [trained] ## Scaling for g, ab, r, h, x2b, x3b, hr, rbi, sb, cs, bb, so, ... [trained] ## Variables removed player_id [trained] 4.6 Apply Preprocessing hof_training_preprocessed_tbl = preprocessing_recipe %&gt;% bake(training(hof_initial_split)) hof_training_preprocessed_tbl ## # A tibble: 1,118 x 18 ## g ab r h x2b x3b hr rbi sb cs ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 3.96 3.72 3.93 3.84 3.27 1.08e+0 5.51 4.55 0.786 0.783 ## 2 -0.873 -0.702 -1.08 -0.770 -0.790 -8.61e-1 -0.556 -0.939 -0.701 -0.323 ## 3 -0.610 -0.702 -0.489 -0.669 -0.570 -1.22e-1 -0.730 -1.12 -0.433 -0.298 ## 4 -0.286 0.113 0.217 0.179 -0.0318 -1.47e-1 -0.974 -0.859 0.180 0.205 ## 5 0.925 0.670 0.158 0.589 0.374 -4.67e-1 1.87 1.21 -0.764 -0.423 ## 6 -0.954 -0.759 -0.582 -0.809 -0.728 -6.64e-1 0.0781 -0.748 0.272 0.984 ## 7 -1.07 -1.22 -1.30 -1.30 -1.27 5.94e-4 -0.861 -1.08 -0.299 -0.649 ## 8 -0.101 0.0222 0.0300 0.0853 0.259 -8.85e-1 0.217 0.136 -0.532 -0.624 ## 9 -0.474 -0.728 -0.601 -0.755 -0.561 -2.40e-2 -0.643 -0.780 -0.334 0.205 ## 10 -0.932 -1.03 -1.14 -1.12 -0.993 -8.12e-1 -0.417 -0.981 -0.813 -0.649 ## # ... with 1,108 more rows, and 8 more variables: bb &lt;dbl&gt;, so &lt;dbl&gt;, ibb &lt;dbl&gt;, ## # hbp &lt;dbl&gt;, sh &lt;dbl&gt;, sf &lt;dbl&gt;, gidp &lt;dbl&gt;, inducted &lt;fct&gt; 4.7 Prepare Cross Validation set.seed(as.numeric(as.factor(&quot;beatnavy&quot;))) hof_cv_folds = training(hof_initial_split) %&gt;% bake(preprocessing_recipe, new_data = .) %&gt;% vfold_cv(v = 5) hof_cv_folds ## # 5-fold cross-validation ## # A tibble: 5 x 2 ## splits id ## &lt;named list&gt; &lt;chr&gt; ## 1 &lt;split [894/224]&gt; Fold1 ## 2 &lt;split [894/224]&gt; Fold2 ## 3 &lt;split [894/224]&gt; Fold3 ## 4 &lt;split [895/223]&gt; Fold4 ## 5 &lt;split [895/223]&gt; Fold5 4.8 Specify Models GLM Model glmnet_model = logistic_reg(mode = &quot;classification&quot;, penalty = tune(), mixture = tune()) %&gt;% set_engine(&quot;glmnet&quot;) glmnet_model ## Logistic Regression Model Specification (classification) ## ## Main Arguments: ## penalty = tune() ## mixture = tune() ## ## Computational engine: glmnet Random Forest Model forest_model = rand_forest( mode = &quot;classification&quot;, mtry = tune(), trees = tune(), min_n = tune() ) %&gt;% set_engine(&quot;randomForest&quot;, objective = &quot;reg:squarederror&quot;) forest_model ## Random Forest Model Specification (classification) ## ## Main Arguments: ## mtry = tune() ## trees = tune() ## min_n = tune() ## ## Engine-Specific Arguments: ## objective = reg:squarederror ## ## Computational engine: randomForest 4.9 Create Grid of Parameters to Validate Over GLM Model glmnet_params = parameters(penalty(), mixture()) glmnet_params ## Collection of 2 parameters for tuning ## ## id parameter type object class ## penalty penalty nparam[+] ## mixture mixture nparam[+] set.seed(as.numeric(as.factor(&quot;beatnavy&quot;))) glmnet_grid = grid_max_entropy(glmnet_params, size = 20) glmnet_grid ## # A tibble: 20 x 2 ## penalty mixture ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1.77e- 9 0.508 ## 2 2.24e- 2 0.0442 ## 3 4.54e-10 0.852 ## 4 1.93e- 8 0.206 ## 5 5.17e- 2 0.988 ## 6 4.62e- 9 0.0242 ## 7 1.94e- 6 0.338 ## 8 8.83e- 1 0.608 ## 9 8.52e- 3 0.597 ## 10 1.23e-10 0.105 ## 11 2.40e-10 0.313 ## 12 5.91e- 8 0.694 ## 13 8.03e- 8 0.936 ## 14 1.32e- 2 0.350 ## 15 8.91e- 6 0.515 ## 16 1.66e- 4 0.915 ## 17 1.44e- 4 0.702 ## 18 1.38e- 6 0.0159 ## 19 1.35e-10 0.643 ## 20 7.04e- 4 0.196 glmnet_grid %&gt;% ggplot(aes(penalty, mixture)) + geom_point(size = 3) + scale_x_log10() + labs(title = &quot;Max Entropy Grid&quot;, x = &quot;Penalty (log scale)&quot;, y = &quot;Mixture&quot;) Random Forest Model forest_params = parameters(mtry(c(2,6)), trees(), min_n()) forest_params ## Collection of 3 parameters for tuning ## ## id parameter type object class ## mtry mtry nparam[+] ## trees trees nparam[+] ## min_n min_n nparam[+] set.seed(as.numeric(as.factor(&quot;beatnavy&quot;))) forest_grid = grid_max_entropy(forest_params, size = 30) forest_grid ## # A tibble: 30 x 3 ## mtry trees min_n ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2 1264 5 ## 2 4 1113 28 ## 3 5 622 11 ## 4 2 28 6 ## 5 3 24 19 ## 6 3 1479 36 ## 7 4 1404 13 ## 8 5 33 40 ## 9 6 115 15 ## 10 6 686 3 ## # ... with 20 more rows 4.10 Execute Cross Validation GLM Model library(tune) glmnet_stage_1_cv_results_tbl = tune_grid( formula = inducted ~ ., model = glmnet_model, resamples = hof_cv_folds, grid = glmnet_grid, metrics = metric_set(accuracy, kap, roc_auc), control = control_grid(verbose = TRUE) ) glmnet_stage_1_cv_results_tbl %&gt;% show_best(&quot;accuracy&quot;, n = 10, maximize = FALSE) ## # A tibble: 10 x 7 ## penalty mixture .metric .estimator mean n std_err ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 8.83e- 1 0.608 accuracy binary 0.886 5 0.00869 ## 2 2.40e-10 0.313 accuracy binary 0.912 5 0.0103 ## 3 1.93e- 8 0.206 accuracy binary 0.912 5 0.0103 ## 4 1.94e- 6 0.338 accuracy binary 0.912 5 0.0103 ## 5 1.44e- 4 0.702 accuracy binary 0.912 5 0.0103 ## 6 1.66e- 4 0.915 accuracy binary 0.912 5 0.0103 ## 7 7.04e- 4 0.196 accuracy binary 0.912 5 0.0118 ## 8 1.35e-10 0.643 accuracy binary 0.913 5 0.00990 ## 9 4.54e-10 0.852 accuracy binary 0.913 5 0.00990 ## 10 1.77e- 9 0.508 accuracy binary 0.913 5 0.0107 glmnet_stage_1_cv_results_tbl %&gt;% show_best(&quot;kap&quot;, n = 10, maximize = FALSE) ## # A tibble: 10 x 7 ## penalty mixture .metric .estimator mean n std_err ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 8.83e- 1 0.608 kap binary 0 5 0 ## 2 5.17e- 2 0.988 kap binary 0.374 5 0.0553 ## 3 1.32e- 2 0.350 kap binary 0.492 5 0.0589 ## 4 7.04e- 4 0.196 kap binary 0.496 5 0.0533 ## 5 2.24e- 2 0.0442 kap binary 0.498 5 0.0637 ## 6 4.62e- 9 0.0242 kap binary 0.499 5 0.0551 ## 7 2.40e-10 0.313 kap binary 0.500 5 0.0432 ## 8 1.93e- 8 0.206 kap binary 0.500 5 0.0432 ## 9 1.94e- 6 0.338 kap binary 0.500 5 0.0432 ## 10 1.44e- 4 0.702 kap binary 0.500 5 0.0432 glmnet_stage_1_cv_results_tbl %&gt;% show_best(&quot;roc_auc&quot;, n = 10, maximize = FALSE) ## # A tibble: 10 x 7 ## penalty mixture .metric .estimator mean n std_err ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 8.83e- 1 0.608 roc_auc binary 0.5 5 0 ## 2 5.17e- 2 0.988 roc_auc binary 0.901 5 0.0192 ## 3 2.24e- 2 0.0442 roc_auc binary 0.919 5 0.0127 ## 4 8.03e- 8 0.936 roc_auc binary 0.919 5 0.0120 ## 5 4.54e-10 0.852 roc_auc binary 0.919 5 0.0121 ## 6 5.91e- 8 0.694 roc_auc binary 0.919 5 0.0121 ## 7 1.94e- 6 0.338 roc_auc binary 0.919 5 0.0121 ## 8 1.35e-10 0.643 roc_auc binary 0.919 5 0.0121 ## 9 1.77e- 9 0.508 roc_auc binary 0.919 5 0.0119 ## 10 8.91e- 6 0.515 roc_auc binary 0.919 5 0.0119 Random Forest Model forest_stage_1_cv_results_tbl = tune_grid( formula = inducted ~ ., model = forest_model, resamples = hof_cv_folds, grid = forest_grid, metrics = metric_set(accuracy, kap, roc_auc), control = control_grid(verbose = TRUE) ) forest_stage_1_cv_results_tbl %&gt;% show_best(&quot;accuracy&quot;, n = 10, maximize = FALSE) ## # A tibble: 10 x 8 ## mtry trees min_n .metric .estimator mean n std_err ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 3 24 19 accuracy binary 0.913 5 0.0122 ## 2 2 69 32 accuracy binary 0.914 5 0.0121 ## 3 4 1128 2 accuracy binary 0.916 5 0.00835 ## 4 5 1992 5 accuracy binary 0.916 5 0.00798 ## 5 3 691 22 accuracy binary 0.916 5 0.00925 ## 6 4 1404 13 accuracy binary 0.916 5 0.00947 ## 7 6 575 23 accuracy binary 0.916 5 0.00936 ## 8 2 1264 5 accuracy binary 0.917 5 0.00979 ## 9 2 1986 16 accuracy binary 0.917 5 0.00948 ## 10 2 824 38 accuracy binary 0.918 5 0.00960 forest_stage_1_cv_results_tbl %&gt;% show_best(&quot;kap&quot;, n = 10, maximize = FALSE) ## # A tibble: 10 x 8 ## mtry trees min_n .metric .estimator mean n std_err ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 3 24 19 kap binary 0.478 5 0.0783 ## 2 6 575 23 kap binary 0.498 5 0.0660 ## 3 2 1264 5 kap binary 0.500 5 0.0639 ## 4 4 1404 13 kap binary 0.501 5 0.0608 ## 5 2 69 32 kap binary 0.501 5 0.0756 ## 6 2 1986 16 kap binary 0.504 5 0.0632 ## 7 3 691 22 kap binary 0.508 5 0.0645 ## 8 4 1128 2 kap binary 0.509 5 0.0539 ## 9 5 1992 5 kap binary 0.509 5 0.0496 ## 10 2 605 13 kap binary 0.514 5 0.0606 forest_stage_1_cv_results_tbl %&gt;% show_best(&quot;roc_auc&quot;, n = 10, maximize = FALSE) ## # A tibble: 10 x 8 ## mtry trees min_n .metric .estimator mean n std_err ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 5 33 40 roc_auc binary 0.890 5 0.0236 ## 2 3 24 19 roc_auc binary 0.899 5 0.0190 ## 3 6 115 15 roc_auc binary 0.910 5 0.0192 ## 4 2 28 6 roc_auc binary 0.913 5 0.0171 ## 5 6 575 23 roc_auc binary 0.913 5 0.0195 ## 6 6 663 38 roc_auc binary 0.916 5 0.0187 ## 7 3 379 31 roc_auc binary 0.916 5 0.0159 ## 8 2 69 32 roc_auc binary 0.917 5 0.0178 ## 9 5 291 22 roc_auc binary 0.917 5 0.0177 ## 10 2 824 38 roc_auc binary 0.917 5 0.0164 4.11 Select Best Parameters params_glmnet_best = glmnet_stage_1_cv_results_tbl %&gt;% select_best(&quot;roc_auc&quot;, maximize = FALSE) params_glmnet_best ## # A tibble: 1 x 2 ## penalty mixture ## &lt;dbl&gt; &lt;dbl&gt; ## 1 0.883 0.608 params_forest_best = forest_stage_1_cv_results_tbl %&gt;% select_best(&quot;roc_auc&quot;, maximize = FALSE) params_forest_best ## # A tibble: 1 x 3 ## mtry trees min_n ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 5 33 40 4.12 Save Best Paramenters glmnet_stage_2_model = glmnet_model %&gt;% finalize_model(parameters = params_glmnet_best) glmnet_stage_2_model ## Logistic Regression Model Specification (classification) ## ## Main Arguments: ## penalty = 0.883211000083764 ## mixture = 0.608328476548195 ## ## Computational engine: glmnet forest_stage_2_model = forest_model %&gt;% finalize_model(params_forest_best) forest_stage_2_model ## Random Forest Model Specification (classification) ## ## Main Arguments: ## mtry = 5 ## trees = 33 ## min_n = 40 ## ## Engine-Specific Arguments: ## objective = reg:squarederror ## ## Computational engine: randomForest 4.13 Compare Models train_processed = training(hof_initial_split) %&gt;% bake(preprocessing_recipe, new_data = .) test_processed = testing(hof_initial_split) %&gt;% bake(preprocessing_recipe, new_data = .) target_expr = preprocessing_recipe %&gt;% pluck(&quot;last_term_info&quot;) %&gt;% filter(role == &quot;outcome&quot;) %&gt;% pull(variable) %&gt;% sym() glmnet_stage_2_metrics = glmnet_stage_2_model %&gt;% fit(formula = inducted ~ ., data = train_processed) %&gt;% predict(new_data = test_processed) %&gt;% bind_cols(testing(hof_initial_split)) %&gt;% metrics(!! target_expr, .pred_class) forest_stage_2_metrics = forest_stage_2_model %&gt;% fit(formula = inducted ~ ., data = train_processed) %&gt;% predict(new_data = test_processed) %&gt;% bind_cols(testing(hof_initial_split)) %&gt;% metrics(!! target_expr, .pred_class) glmnet_stage_2_metrics %&gt;% mutate(mod = &quot;glmnet&quot;) %&gt;% bind_rows( forest_stage_2_metrics %&gt;% mutate(mod = &quot;forest&quot;) ) %&gt;% arrange(.metric,-.estimate) ## # A tibble: 4 x 4 ## .metric .estimator .estimate mod ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 accuracy binary 0.900 forest ## 2 accuracy binary 0.857 glmnet ## 3 kap binary 0.497 forest ## 4 kap binary 0 glmnet Looks like the Random Forest is the better model. 4.14 Run Best Model on All Data model_final = forest_stage_2_model %&gt;% fit(inducted ~ . , data = bake(preprocessing_recipe, new_data = hofmod)) 4.15 Run Model on New Data hoftest %&gt;% bake(preprocessing_recipe, new_data = .) %&gt;% predict(model_final, new_data = .) %&gt;% bind_cols(hoftest %&gt;% select(player_id)) %&gt;% arrange(desc(.pred_class)) ## # A tibble: 168 x 2 ## .pred_class player_id ## &lt;fct&gt; &lt;chr&gt; ## 1 1 beltrad01 ## 2 1 beltrca01 ## 3 1 cabremi01 ## 4 1 heltoto01 ## 5 1 jeterde01 ## 6 1 konerpa01 ## 7 1 ortizda01 ## 8 1 pujolal01 ## 9 1 rodrial01 ## 10 1 rolliji01 ## # ... with 158 more rows 4.16 Variable Importance vip(model_final) + labs(title = &quot;Random Forest Model Importance - HOF Prediction&quot;) Many Thanks "]
]
